#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <Adafruit_Fingerprint.h>
#include <ArduinoJson.h>
#include <vector>

class FingerprintSystem {
private:
    // Hardware Configuration
    Adafruit_SSD1306 display;
    HardwareSerial fingerSerial;
    Adafruit_Fingerprint fingerSensor;
    WebSocketsServer webSocket;

    // Pins
    const uint8_t LED_SUCCESS = 32;
    const uint8_t LED_PENDING = 33;
    const uint8_t UP_BTN = 25;
    const uint8_t DOWN_BTN = 26;
    const uint8_t SELECT_BTN = 27;

    // System State
    enum class SystemState { DISCONNECTED, CONNECTED, MENU, ENROLLMENT, VERIFICATION };
    SystemState currentState;

    // Menu System
    std::vector<String> menuItems;
    int selectedIndex = 0;
    int scrollOffset = 0;
    const int maxDisplayItems = 4;

    // Network Configuration
    const char* ssid = "TCA@Admin";
    const char* password = "Shivam@9211";

    void initializeOLED() {
        if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
            Serial.println("OLED failed");
            while(true);
        }
        display.clearDisplay();
        display.display();
    }

    void initializeFingerprint() {
        fingerSerial.begin(57600, SERIAL_8N1, 16, 17);
        fingerSensor.begin(57600);
        
        if (fingerSensor.verifyPassword()) {
            setState(SystemState::CONNECTED);
        } else {
            setState(SystemState::DISCONNECTED);
        }
    }

    void connectToWiFi() {
        WiFi.begin(ssid, password);
        while (WiFi.status() != WL_CONNECTED) {
            delay(500);
        }
    }

    void setState(SystemState newState) {
        currentState = newState;
        updateDisplay();
        digitalWrite(LED_SUCCESS, currentState == SystemState::CONNECTED);
    }

    void updateDisplay() {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);

        switch(currentState) {
            case SystemState::DISCONNECTED:
                display.println("Sensor Disconnected");
                break;
                
            case SystemState::CONNECTED:
                display.println("Web Enabled ");
                display.println("Fingerprint EVM");
                display.println("_______________");
                display.println("System Ready");
                display.print("Stored:"); display.println(fingerSensor.templateCount);
                display.print("IP:"); display.println(WiFi.localIP());
                display.println("Admin:Mr.Brijesh ");
                delay(3000);
                break;
                
            case SystemState::MENU:
                display.println("Select Option:");
                for (int i = scrollOffset; i < min(scrollOffset + maxDisplayItems, (int)menuItems.size()); i++) {
                    if (i == selectedIndex) display.print("> ");
                    else display.print("  ");
                    display.println(menuItems[i]);
                }
                break;
                
            case SystemState::ENROLLMENT:
                display.println("Enrollment Mode");
                break;
                
            case SystemState::VERIFICATION:
                display.println("Verification Mode");
                break;
        }
        display.display();
    }

    void handleButtons() {
        static unsigned long lastDebounce = 0;
        if (millis() - lastDebounce < 200) return;
        
        if (digitalRead(UP_BTN) == LOW) {
            selectedIndex = (selectedIndex - 1 + menuItems.size()) % menuItems.size();
            if (selectedIndex < scrollOffset) scrollOffset = selectedIndex;
            updateDisplay();
            lastDebounce = millis();
        }
        
        if (digitalRead(DOWN_BTN) == LOW) {
            selectedIndex = (selectedIndex + 1) % menuItems.size();
            if (selectedIndex >= scrollOffset + maxDisplayItems) scrollOffset++;
            updateDisplay();
            lastDebounce = millis();
        }
        
        if (digitalRead(SELECT_BTN) == LOW && currentState == SystemState::MENU) {
            executeMenuAction();
            lastDebounce = millis();
        }
    }

    void executeMenuAction() {
        String selected = menuItems[selectedIndex];
        if (selected == "Enroll User") {
            setState(SystemState::ENROLLMENT);
        } 
        else if (selected == "Verify User") {
            setState(SystemState::VERIFICATION);
        }
    }

    static void webSocketEvent(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
        switch(type) {
            case WStype_CONNECTED:
                FingerprintSystem::instance().sendStatus(num);
                break;
            case WStype_TEXT:
                FingerprintSystem::instance().handleWebSocketMessage((char*)payload);
                break;
        }
    }

    void handleWebSocketMessage(char* message) {
        DynamicJsonDocument doc(256);
        deserializeJson(doc, message);
        
        String command = doc["command"];
        if (command == "getStatus") {
            sendStatusToAll();
        }
    }

    void sendStatus(uint8_t clientNum) {
        DynamicJsonDocument doc(256);
        doc["status"] = (currentState == SystemState::CONNECTED) ? "connected" : "disconnected";
        doc["templates"] = fingerSensor.templateCount;
        
        String output;
        serializeJson(doc, output);
        webSocket.sendTXT(clientNum, output);
    }

    void sendStatusToAll() {
        DynamicJsonDocument doc(256);
        doc["status"] = (currentState == SystemState::CONNECTED) ? "connected" : "disconnected";
        
        String output;
        serializeJson(doc, output);
        webSocket.broadcastTXT(output);
    }

public:
    static FingerprintSystem& instance() {
        static FingerprintSystem instance;
        return instance;
    }

    FingerprintSystem() : 
        display(128, 64, &Wire, -1),
        fingerSerial(2),
        fingerSensor(&fingerSerial),
        webSocket(81),
        currentState(SystemState::DISCONNECTED) {
            
        menuItems = {"Enroll User", "Verify User", "System Info", "WiFi Settings"};
    }

    void begin() {
        Serial.begin(115200);
        pinMode(LED_SUCCESS, OUTPUT);
        pinMode(LED_PENDING, OUTPUT);
        pinMode(UP_BTN, INPUT_PULLUP);
        pinMode(DOWN_BTN, INPUT_PULLUP);
        pinMode(SELECT_BTN, INPUT_PULLUP);
        
        initializeOLED();
        initializeFingerprint();
        connectToWiFi();
        
        webSocket.begin();
        webSocket.onEvent(webSocketEvent);
        
        setState(SystemState::MENU);
    }

    void loop() {
        webSocket.loop();
        handleButtons();
        
        static unsigned long lastCheck = 0;
        if (millis() - lastCheck > 2000) {
            lastCheck = millis();
            if (!fingerSensor.verifyPassword()) {
                setState(SystemState::DISCONNECTED);
            }
        }
    }
};

FingerprintSystem& fingerprintSystem = FingerprintSystem::instance();

void setup() {
    fingerprintSystem.begin();
}

void loop() {
    fingerprintSystem.loop();
}