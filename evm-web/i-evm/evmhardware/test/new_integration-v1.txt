#include <WiFi.h>
#include <HTTPClient.h>
#include <Adafruit_Fingerprint.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Fingerprint sensor setup
HardwareSerial mySerial(2);  // Use UART2
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// WiFi credentials
const char* ssid = "TCA@Admin";
const char* password = "Shivam@9211";

// API endpoints
const String baseUrl = "http://localhost:8080/api";
const String verifyVoterEndpoint = "/voters/login/verify-voter/";
const String voterEndpoint = "/voters/";
const String candidatesEndpoint = "/candidates";
const String voteEndpoint = "/candidates/";

// Voting state variables
String voterId = "";
String currentPosition = "";
String positions[10];  // Adjust size based on expected number of positions
int positionCount = 0;
String candidates[20][3];  // [id, name, party] - adjust size as needed
int candidateCount = 0;
String selectedCandidateId = "";
bool isVerified = false;
bool hasVoted = false;

// UI navigation
int currentMenu = 0;  // 0: main, 1: positions, 2: candidates, 3: confirmation
int selectedIndex = 0;
int scrollOffset = 0;

// Button pins
const int buttonUpPin = 14;
const int buttonDownPin = 27;
const int buttonSelectPin = 26;
const int buttonBackPin = 25;

void setup() {
  Serial.begin(115200);
  
  // Initialize OLED
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  // Initialize fingerprint sensor
  finger.begin(57600);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    displayMessage("Fingerprint sensor", "not found!", "Please reset");
    while (1);
  }
  
  // Initialize buttons
  pinMode(buttonUpPin, INPUT_PULLUP);
  pinMode(buttonDownPin, INPUT_PULLUP);
  pinMode(buttonSelectPin, INPUT_PULLUP);
  pinMode(buttonBackPin, INPUT_PULLUP);
  
  // Connect to WiFi
  connectToWiFi();
  
  // Initial display
  displayMainMenu();
}

void loop() {
  // Button handling
  if (digitalRead(buttonUpPin) == LOW) {
    handleUpButton();
    delay(200);  // Debounce
  }
  if (digitalRead(buttonDownPin) == LOW) {
    handleDownButton();
    delay(200);  // Debounce
  }
  if (digitalRead(buttonSelectPin) == LOW) {
    handleSelectButton();
    delay(200);  // Debounce
  }
  if (digitalRead(buttonBackPin) == LOW) {
    handleBackButton();
    delay(200);  // Debounce
  }
  
  // If not verified, check for fingerprint
  if (!isVerified && currentMenu == 0) {
    checkFingerprint();
  }
}

// WiFi connection
void connectToWiFi() {
  displayMessage("Connecting to", "WiFi...", "");
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  
  displayMessage("WiFi connected!", "IP:", WiFi.localIP().toString());
  delay(2000);
}

// Fingerprint functions
void checkFingerprint() {
  int fingerprintID = getFingerprintID();
  
  if (fingerprintID != -1) {
    // Fingerprint found, verify voter
    String fingerprintTemplate = "fingerprint-template-" + String(fingerprintID);
    verifyVoter(fingerprintTemplate);
  }
}

int getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) return -1;
  
  return finger.fingerID;
}

// API functions
void verifyVoter(String fingerprintTemplate) {
  displayMessage("Verifying", "voter...", "");
  
  HTTPClient http;
  String url = baseUrl + verifyVoterEndpoint + "voter-id/" + fingerprintTemplate;
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    if (payload == "true") {
      // Get voter ID from the response (in a real system, this would be more structured)
      voterId = "VTR" + String(random(1000, 9999));  // Mock - replace with actual response parsing
      
      // Check if voter has already voted
      checkVoterStatus(voterId);
    } else {
      displayMessage("Verification", "failed!", "Try again");
    }
  } else {
    displayMessage("Server error", "HTTP: " + String(httpCode), "Try again");
  }
  
  http.end();
}

void checkVoterStatus(String voterId) {
  HTTPClient http;
  String url = baseUrl + voterEndpoint + voterId;
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    // Parse JSON response (simplified for example)
    if (payload.indexOf("\"hasVoted\":true") != -1) {
      displayMessage("You have", "already voted!", "");
      hasVoted = true;
    } else {
      isVerified = true;
      displayMessage("Verification", "successful!", "Welcome");
      delay(2000);
      fetchPositions();
    }
  } else {
    displayMessage("Error checking", "voter status", "Try again");
  }
  
  http.end();
}

void fetchPositions() {
  displayMessage("Loading", "positions...", "");
  
  HTTPClient http;
  String url = baseUrl + candidatesEndpoint;
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    // Parse JSON response to extract positions (simplified)
    // In a real implementation, use a proper JSON parser
    
    // Example parsing (adjust based on your actual API response)
    int posStart = payload.indexOf("\"position\":");
    while (posStart != -1) {
      int posEnd = payload.indexOf("\"", posStart + 11);
      String position = payload.substring(posStart + 11, posEnd);
      
      // Add if not already in array
      bool exists = false;
      for (int i = 0; i < positionCount; i++) {
        if (positions[i] == position) {
          exists = true;
          break;
        }
      }
      
      if (!exists && positionCount < 10) {
        positions[positionCount++] = position;
      }
      
      posStart = payload.indexOf("\"position\":", posEnd);
    }
    
    if (positionCount > 0) {
      currentMenu = 1;  // Show positions menu
      displayPositionsMenu();
    } else {
      displayMessage("No positions", "found!", "");
    }
  } else {
    displayMessage("Error loading", "positions", "Try again");
  }
  
  http.end();
}

void fetchCandidates(String position) {
  displayMessage("Loading", "candidates...", "");
  
  HTTPClient http;
  String url = baseUrl + candidatesEndpoint;
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    // Parse JSON response to extract candidates for this position
    
    // Reset candidates
    candidateCount = 0;
    
    // Example parsing (adjust based on your actual API response)
    int candidateStart = payload.indexOf("{\"id\":");
    while (candidateStart != -1) {
      int candidateEnd = payload.indexOf("}", candidateStart);
      String candidate = payload.substring(candidateStart, candidateEnd + 1);
      
      // Extract candidate details (simplified)
      int idStart = candidate.indexOf("\"id\":\"") + 6;
      int idEnd = candidate.indexOf("\"", idStart);
      String id = candidate.substring(idStart, idEnd);
      
      int nameStart = candidate.indexOf("\"name\":\"") + 8;
      int nameEnd = candidate.indexOf("\"", nameStart);
      String name = candidate.substring(nameStart, nameEnd);
      
      int partyStart = candidate.indexOf("\"party\":\"") + 9;
      int partyEnd = candidate.indexOf("\"", partyStart);
      String party = candidate.substring(partyStart, partyEnd);
      
      int posStart = candidate.indexOf("\"position\":\"") + 12;
      int posEnd = candidate.indexOf("\"", posStart);
      String pos = candidate.substring(posStart, posEnd);
      
      if (pos == position && candidateCount < 20) {
        candidates[candidateCount][0] = id;
        candidates[candidateCount][1] = name;
        candidates[candidateCount][2] = party;
        candidateCount++;
      }
      
      candidateStart = payload.indexOf("{\"id\":", candidateEnd);
    }
    
    if (candidateCount > 0) {
      currentMenu = 2;  // Show candidates menu
      displayCandidatesMenu();
    } else {
      displayMessage("No candidates", "found for", position);
    }
  } else {
    displayMessage("Error loading", "candidates", "Try again");
  }
  
  http.end();
}

void castVote(String voterId, String candidateId) {
  HTTPClient http;
  
  // First mark voter as voted
  String markVotedUrl = baseUrl + voterEndpoint + voterId + "/mark-voted";
  http.begin(markVotedUrl);
  int httpCode = http.POST("");
  
  if (httpCode == HTTP_CODE_OK) {
    // Then submit the vote for candidate
    String voteUrl = baseUrl + voteEndpoint + candidateId + "/vote";
    http.begin(voteUrl);
    httpCode = http.POST("");
    
    if (httpCode == HTTP_CODE_OK) {
      displayMessage("Vote submitted", "successfully!", "Thank you");
      hasVoted = true;
      delay(3000);
      displayMainMenu();
    } else {
      displayMessage("Error submitting", "vote", "Try again");
    }
  } else {
    displayMessage("Error marking", "voter as voted", "Try again");
  }
  
  http.end();
}

// UI functions
void displayMessage(String line1, String line2, String line3) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(0, 0);
  display.println(line1);
  display.setCursor(0, 20);
  display.println(line2);
  display.setCursor(0, 40);
  display.println(line3);
  
  display.display();
}

void displayMainMenu() {
  currentMenu = 0;
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(0, 0);
  display.println("ONLINE VOTING SYSTEM");
  display.println("--------------------");
  
  if (!isVerified) {
    display.println("1. Verify Fingerprint");
    display.println("Place finger on sensor");
  } else if (!hasVoted) {
    display.println("1. Select Position");
    display.println("2. View Candidates");
  } else {
    display.println("You have already voted");
    display.println("Thank you!");
  }
  
  display.display();
}

void displayPositionsMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(0, 0);
  display.println("SELECT POSITION");
  display.println("--------------------");
  
  for (int i = scrollOffset; i < min(positionCount, scrollOffset + 4); i++) {
    if (i == selectedIndex) {
      display.print("> ");
    } else {
      display.print("  ");
    }
    display.println(positions[i]);
  }
  
  display.display();
}

void displayCandidatesMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(0, 0);
  display.println("SELECT CANDIDATE");
  display.println("--------------------");
  
  for (int i = scrollOffset; i < min(candidateCount, scrollOffset + 3); i++) {
    if (i == selectedIndex) {
      display.print("> ");
    } else {
      display.print("  ");
    }
    display.print(candidates[i][1]);
    display.print(" (");
    display.print(candidates[i][2]);
    display.println(")");
  }
  
  display.display();
}

void displayConfirmationScreen() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(0, 0);
  display.println("CONFIRM YOUR VOTE");
  display.println("--------------------");
  
  display.print("Candidate: ");
  display.println(candidates[selectedIndex][1]);
  
  display.print("Party: ");
  display.println(candidates[selectedIndex][2]);
  
  display.print("Position: ");
  display.println(currentPosition);
  
  display.println("");
  display.println("Press SELECT to confirm");
  display.println("Press BACK to cancel");
  
  display.display();
}

// Button handlers
void handleUpButton() {
  if (currentMenu == 1 || currentMenu == 2) {
    if (selectedIndex > 0) {
      selectedIndex--;
      if (selectedIndex < scrollOffset) {
        scrollOffset = selectedIndex;
      }
      
      if (currentMenu == 1) displayPositionsMenu();
      else if (currentMenu == 2) displayCandidatesMenu();
    }
  }
}

void handleDownButton() {
  if (currentMenu == 1) {
    if (selectedIndex < positionCount - 1) {
      selectedIndex++;
      if (selectedIndex >= scrollOffset + 4) {
        scrollOffset++;
      }
      displayPositionsMenu();
    }
  } else if (currentMenu == 2) {
    if (selectedIndex < candidateCount - 1) {
      selectedIndex++;
      if (selectedIndex >= scrollOffset + 3) {
        scrollOffset++;
      }
      displayCandidatesMenu();
    }
  }
}

void handleSelectButton() {
  if (currentMenu == 0) {
    if (isVerified && !hasVoted) {
      currentMenu = 1;
      selectedIndex = 0;
      scrollOffset = 0;
      displayPositionsMenu();
    }
  } else if (currentMenu == 1) {
    currentPosition = positions[selectedIndex];
    fetchCandidates(currentPosition);
    selectedIndex = 0;
    scrollOffset = 0;
  } else if (currentMenu == 2) {
    currentMenu = 3;
    displayConfirmationScreen();
  } else if (currentMenu == 3) {
    castVote(voterId, candidates[selectedIndex][0]);
    currentMenu = 0;
    selectedIndex = 0;
    scrollOffset = 0;
  }
}

void handleBackButton() {
  if (currentMenu == 1 || currentMenu == 2) {
    currentMenu = 0;
    selectedIndex = 0;
    scrollOffset = 0;
    displayMainMenu();
  } else if (currentMenu == 3) {
    currentMenu = 2;
    displayCandidatesMenu();
  }
}