#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <Adafruit_Fingerprint.h>
#include <ArduinoJson.h>
#include <vector>
#include <HTTPClient.h>

class FingerprintSystem {
public:
    struct Candidate {
        String id;
        String name;
        String party;
        String position;
    };

    // Hardware Configuration
    Adafruit_SSD1306 display;
    HardwareSerial fingerSerial;
    Adafruit_Fingerprint fingerSensor;
    HTTPClient http;

    // Pins
    const uint8_t LED_SUCCESS = 32;
    const uint8_t LED_PENDING = 33;
    const uint8_t UP_BTN = 25;
    const uint8_t DOWN_BTN = 26;
    const uint8_t SELECT_BTN = 27;
    const uint8_t MENU_BTN = 14;
    const uint8_t VOTE_BTN = 12;

    // System State
    enum class SystemState { DISCONNECTED, CONNECTED, MENU, ENROLLMENT, VERIFICATION, VOTING };
    SystemState currentState;

    // Menu System
    std::vector<String> menuItems;
    std::vector<Candidate> candidates;
    int selectedIndex = 0;
    int scrollOffset = 0;
    const int maxDisplayItems = 4;

    // Network Configuration
    const char* ssid = "TCA@Admin";
    const char* password = "Shivam@9211";
    const char* serverUrl = "http://localhost:8080";

    // Voting Data
    String currentVoterId;
    String currentFingerprint;
    bool hasVoted = false;

    void initializeOLED() {
        if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
            Serial.println("OLED failed");
            while(true);
        }
        display.clearDisplay();
        display.display();
    }

    void initializeFingerprint() {
        fingerSerial.begin(57600, SERIAL_8N1, 16, 17);
        fingerSensor.begin(57600);
        
        if (fingerSensor.verifyPassword()) {
            setState(SystemState::CONNECTED);
        } else {
            setState(SystemState::DISCONNECTED);
        }
    }

    void connectToWiFi() {
        WiFi.begin(ssid, password);
        while (WiFi.status() != WL_CONNECTED) {
            delay(500);
            Serial.print(".");
        }
        Serial.println("\nConnected to WiFi");
        Serial.print("IP Address: ");
        Serial.println(WiFi.localIP());
    }

    void setState(SystemState newState) {
        currentState = newState;
        updateDisplay();
        digitalWrite(LED_SUCCESS, currentState == SystemState::CONNECTED);
    }

    void updateDisplay() {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);

        switch(currentState) {
            case SystemState::DISCONNECTED:
                display.println("Sensor Disconnected");
                break;
                
            case SystemState::CONNECTED:
                display.println("System Ready");
                display.print("IP: ");
                display.println(WiFi.localIP());
                break;
                
            case SystemState::MENU:
                display.println("Select Option:");
                for (int i = scrollOffset; i < min(scrollOffset + maxDisplayItems, (int)menuItems.size()); i++) {
                    if (i == selectedIndex) display.print("> ");
                    else display.print("  ");
                    display.println(menuItems[i]);
                }
                break;
                
            case SystemState::ENROLLMENT:
                handleEnrollment();
                break;
                
            case SystemState::VERIFICATION:
                handleVerification();
                break;
                
            case SystemState::VOTING:
                handleVotingDisplay();
                break;
        }
        display.display();
    }

    void handleEnrollment() {
        display.println("Enrollment Mode");
        display.println("Scan fingerprint...");
        display.display();
        
        String fingerprint = captureFingerprint();
        if (fingerprint.isEmpty()) {
            displayMessage("Capture failed! Try again");
            return;
        }
        
        String voterId = generateVoterId();
        if (enrollVoter(voterId, fingerprint)) {
            displayMessage("Enrollment Success!\nVoter ID: " + voterId);
        } else {
            displayMessage("Enrollment Failed!");
        }
        delay(3000);
        setState(SystemState::MENU);
    }

    void handleVerification() {
        display.println("Verification Mode");
        display.println("Scan fingerprint...");
        display.display();
        
        String fingerprint = captureFingerprint();
        if (fingerprint.isEmpty()) {
            displayMessage("Capture failed! Try again");
            return;
        }
        
        currentVoterId = verifyFingerprint(fingerprint);
        if (currentVoterId.isEmpty()) {
            displayMessage("Verification Failed!");
            delay(2000);
            setState(SystemState::MENU);
            return;
        }
        
        // Check if voter has already voted
        if (checkVoterStatus(currentVoterId)) {
            displayMessage("You have already voted!");
            hasVoted = true;
            delay(2000);
            setState(SystemState::MENU);
            return;
        }
        
        if (fetchCandidates()) {
            setState(SystemState::VOTING);
        } else {
            displayMessage("No candidates found!");
            delay(2000);
            setState(SystemState::MENU);
        }
    }

    bool checkVoterStatus(const String& voterId) {
        String endpoint = String(serverUrl) + "/api/voters/" + voterId;
        http.begin(endpoint);
        
        int httpCode = http.GET();
        if (httpCode == HTTP_CODE_OK) {
            String payload = http.getString();
            DynamicJsonDocument doc(256);
            deserializeJson(doc, payload);
            return doc["hasVoted"].as<bool>();
        }
        http.end();
        return false;
    }

    void handleVotingDisplay() {
        display.println("Select Candidate:");
        for (int i = scrollOffset; i < min(scrollOffset + maxDisplayItems, (int)candidates.size()); i++) {
            if (i == selectedIndex) display.print("> ");
            else display.print("  ");
            display.println(candidates[i].name + " (" + candidates[i].party + ")");
        }
    }

    String captureFingerprint() {
        displayMessage("Place finger on sensor...");
        
        int p = -1;
        while (p != FINGERPRINT_OK) {
            p = fingerSensor.getImage();
            if (p == FINGERPRINT_NOFINGER) continue;
            if (p != FINGERPRINT_OK) {
                displayMessage("Error: " + String(p));
                return "";
            }
            
            p = fingerSensor.image2Tz(1);
            if (p != FINGERPRINT_OK) {
                displayMessage("Conversion error");
                return "";
            }
            
            displayMessage("Remove finger...");
            delay(2000);
            
            displayMessage("Place same finger again");
            p = fingerSensor.getImage();
            if (p != FINGERPRINT_OK) return "";
            
            p = fingerSensor.image2Tz(2);
            if (p != FINGERPRINT_OK) return "";
            
            p = fingerSensor.createModel();
            if (p != FINGERPRINT_OK) {
                displayMessage("Prints mismatch");
                return "";
            }
            
            if (fingerSensor.getImage() == FINGERPRINT_OK) {
                if (fingerSensor.image2Tz() == FINGERPRINT_OK) {
                    if (fingerSensor.fingerSearch() == FINGERPRINT_OK) {
                        int fingerprintID = fingerSensor.fingerID;
                        String fingerprintData = "ID_" + String(fingerprintID);
                        return fingerprintData;
                    }
                }
            } 
        }    
        return "";
    }

    bool enrollVoter(const String& voterId, const String& fingerprintData) {
        String endpoint = String(serverUrl) + "/api/voters/enroll";
        http.begin(endpoint);
        http.addHeader("Content-Type", "application/json");
        
        DynamicJsonDocument doc(256);
        doc["voterId"] = voterId;
        doc["fingerprintData"] = fingerprintData;
        
        String payload;
        serializeJson(doc, payload);
        
        int httpCode = http.POST(payload);
        http.end();
        
        return (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED);
    }

    String verifyFingerprint(const String& fingerprintData) {
        String endpoint = String(serverUrl) + "/api/voters/login/verify-voter";
        http.begin(endpoint);
        http.addHeader("Content-Type", "application/json");
        
        DynamicJsonDocument doc(256);
        doc["fingerprintData"] = fingerprintData;
        
        String payload;
        serializeJson(doc, payload);
        
        int httpCode = http.POST(payload);
        if (httpCode == HTTP_CODE_OK) {
            String response = http.getString();
            DynamicJsonDocument resDoc(256);
            deserializeJson(resDoc, response);
            return resDoc["voterId"].as<String>();
        }
        http.end();
        return "";
    }

    bool fetchCandidates() {
        String endpoint = String(serverUrl) + "/api/candidates";
        http.begin(endpoint);
        
        int httpCode = http.GET();
        if (httpCode == HTTP_CODE_OK) {
            String payload = http.getString();
            DynamicJsonDocument doc(1024);
            deserializeJson(doc, payload);
            
            candidates.clear();
            for (JsonObject candidate : doc.as<JsonArray>()) {
                Candidate c;
                c.id = candidate["id"].as<String>();
                c.name = candidate["name"].as<String>();
                c.party = candidate["party"].as<String>();
                c.position = candidate["position"].as<String>();
                candidates.push_back(c);
            }
            return !candidates.empty();
        }
        http.end();
        return false;
    }

    bool castVote() {
        if (selectedIndex < 0 || selectedIndex >= candidates.size()) return false;
        
        // Cast vote for candidate
        String endpoint = String(serverUrl) + "/api/candidates/" + candidates[selectedIndex].id + "/vote";
        http.begin(endpoint);
        int voteCode = http.POST("");
        
        // Mark voter as voted
        endpoint = String(serverUrl) + "/api/voters/" + currentVoterId + "/mark-voted";
        http.begin(endpoint);
        int markCode = http.POST("");
        
        if ((voteCode == HTTP_CODE_OK || voteCode == HTTP_CODE_CREATED) && 
            (markCode == HTTP_CODE_OK)) {
            hasVoted = true;
            return true;
        }
        return false;
    }

    void displayMessage(const String& message) {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println(message);
        display.display();
    }

    String generateVoterId() {
        return "VTR" + String(random(10000, 99999));
    }

    void handleButtons() {
        static unsigned long lastDebounce = 0;
        if (millis() - lastDebounce < 200) return;
        
        // Menu button - return to main menu
        if (digitalRead(MENU_BTN) == LOW) {
            setState(SystemState::MENU);
            lastDebounce = millis();
            return;
        }
        
        // Navigation buttons
        if (digitalRead(UP_BTN) == LOW) {
            selectedIndex = (selectedIndex - 1 + (currentState == SystemState::VOTING ? candidates.size() : menuItems.size())) % 
                           (currentState == SystemState::VOTING ? candidates.size() : menuItems.size());
            if (selectedIndex < scrollOffset) scrollOffset = selectedIndex;
            updateDisplay();
            lastDebounce = millis();
        }
        
        if (digitalRead(DOWN_BTN) == LOW) {
            selectedIndex = (selectedIndex + 1) % 
                           (currentState == SystemState::VOTING ? candidates.size() : menuItems.size());
            if (selectedIndex >= scrollOffset + maxDisplayItems) scrollOffset++;
            updateDisplay();
            lastDebounce = millis();
        }
        
        // Select button
        if (digitalRead(SELECT_BTN) == LOW) {
            if (currentState == SystemState::MENU) {
                executeMenuAction();
            } else if (currentState == SystemState::VOTING) {
                if (castVote()) {
                    displayMessage("Vote Successful!");
                } else {
                    displayMessage("Vote Failed!");
                }
                delay(2000);
                setState(SystemState::MENU);
            }
            lastDebounce = millis();
        }
    }

    void executeMenuAction() {
        String selected = menuItems[selectedIndex];
        if (selected == "Enroll User") {
            setState(SystemState::ENROLLMENT);
        } 
        else if (selected == "Verify & Vote") {
            if (hasVoted) {
                displayMessage("You have already voted!");
                delay(2000);
            } else {
                setState(SystemState::VERIFICATION);
            }
        }
    }

    static FingerprintSystem& instance() {
        static FingerprintSystem instance;
        return instance;
    }

    FingerprintSystem() : 
        display(128, 64, &Wire, -1),
        fingerSerial(2),
        fingerSensor(&fingerSerial),
        currentState(SystemState::DISCONNECTED) {
            
        menuItems = {"Enroll User", "Verify & Vote", "System Info"};
    }

    void begin() {
        Serial.begin(115200);
        pinMode(LED_SUCCESS, OUTPUT);
        pinMode(LED_PENDING, OUTPUT);
        pinMode(UP_BTN, INPUT_PULLUP);
        pinMode(DOWN_BTN, INPUT_PULLUP);
        pinMode(SELECT_BTN, INPUT_PULLUP);
        pinMode(MENU_BTN, INPUT_PULLUP);
        pinMode(VOTE_BTN, INPUT_PULLUP);
        
        initializeOLED();
        initializeFingerprint();
        connectToWiFi();
        
        setState(SystemState::MENU);
    }

    void loop() {
        handleButtons();
        
        static unsigned long lastCheck = 0;
        if (millis() - lastCheck > 2000) {
            lastCheck = millis();
            if (!fingerSensor.verifyPassword()) {
                setState(SystemState::DISCONNECTED);
            }
        }
    }
};

FingerprintSystem& fingerprintSystem = FingerprintSystem::instance();

void setup() {
    fingerprintSystem.begin();
}

void loop() {
    fingerprintSystem.loop();
}