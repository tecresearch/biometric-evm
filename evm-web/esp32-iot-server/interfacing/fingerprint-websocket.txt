#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <Adafruit_Fingerprint.h>

// OLED Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Fingerprint Sensor Configuration
#define FINGERPRINT_RX 16  // ESP32 RX pin (connects to sensor TX)
#define FINGERPRINT_TX 17  // ESP32 TX pin (connects to sensor RX)
SoftwareSerial fingerSerial(FINGERPRINT_RX, FINGERPRINT_TX);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&fingerSerial);

// WiFi Configuration
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

// WebSocket Server
WebSocketsServer webSocket = WebSocketsServer(81);

// System State
enum SystemState {
  STATE_DISCONNECTED,
  STATE_CONNECTED,
  STATE_ENROLLING,
  STATE_MATCHING,
  STATE_ENROLL_SUCCESS,
  STATE_MATCH_SUCCESS
};
SystemState currentState = STATE_DISCONNECTED;

void setup() {
  Serial.begin(115200);
  
  // Initialize OLED
  initializeOLED();
  
  // Initialize Fingerprint Sensor
  initializeFingerprintSensor();
  
  // Connect to WiFi
  connectToWiFi();
  
  // Start WebSocket server
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  
  // Initial display update
  updateDisplay();
}

void loop() {
  webSocket.loop();
  
  // Check fingerprint sensor connection periodically
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck > 2000) {
    lastCheck = millis();
    if (!finger.verifyPassword()) {
      currentState = STATE_DISCONNECTED;
      updateDisplay();
      webSocket.broadcastTXT("Fingerprint sensor disconnected");
    }
  }
  
  // Handle fingerprint operations based on state
  handleFingerprintOperations();
}

// Initialize OLED Display
void initializeOLED() {
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.clearDisplay();
  display.display();
}

// Initialize Fingerprint Sensor
void initializeFingerprintSensor() {
  fingerSerial.begin(57600);
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Initializing");
  display.println("Fingerprint");
  display.println("Sensor...");
  display.display();
  
  if (finger.begin()) {
    currentState = STATE_CONNECTED;
    Serial.println("Found fingerprint sensor!");
    Serial.print("Capacity: "); Serial.println(finger.capacity);
    Serial.print("Packet length: "); Serial.println(finger.packetLen);
  } else {
    currentState = STATE_DISCONNECTED;
    Serial.println("Did not find fingerprint sensor :(");
  }
  
  updateDisplay();
}

// Connect to WiFi
void connectToWiFi() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Connecting to WiFi");
  display.println(ssid);
  display.display();
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    display.print(".");
    display.display();
  }
  
  display.clearDisplay();
  display.println("WiFi connected");
  display.print("IP: ");
  display.println(WiFi.localIP());
  display.display();
  delay(2000);
}

// WebSocket Event Handler
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Disconnected!\n", num);
      break;
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("[%u] Connected from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
        // Send current state to newly connected client
        sendStateUpdate(num);
      }
      break;
    case WStype_TEXT:
      // Handle incoming commands
      handleWebSocketCommand((char*)payload);
      break;
  }
}

// Handle WebSocket Commands
void handleWebSocketCommand(char* command) {
  if (strcmp(command, "enroll") == 0) {
    if (currentState == STATE_CONNECTED) {
      currentState = STATE_ENROLLING;
      updateDisplay();
      webSocket.broadcastTXT("Starting enrollment process");
    }
  } else if (strcmp(command, "match") == 0) {
    if (currentState == STATE_CONNECTED) {
      currentState = STATE_MATCHING;
      updateDisplay();
      webSocket.broadcastTXT("Starting matching process");
    }
  }
  
  updateDisplay();
}

// Send State Update to WebSocket Client
void sendStateUpdate(uint8_t clientNum) {
  switch(currentState) {
    case STATE_DISCONNECTED:
      webSocket.sendTXT(clientNum, "state:disconnected");
      break;
    case STATE_CONNECTED:
      webSocket.sendTXT(clientNum, "state:connected");
      break;
    case STATE_ENROLLING:
      webSocket.sendTXT(clientNum, "state:enrolling");
      break;
    case STATE_MATCHING:
      webSocket.sendTXT(clientNum, "state:matching");
      break;
    case STATE_ENROLL_SUCCESS:
      webSocket.sendTXT(clientNum, "state:enroll_success");
      break;
    case STATE_MATCH_SUCCESS:
      webSocket.sendTXT(clientNum, "state:match_success");
      break;
  }
}

// Update OLED Display Based on State
void updateDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  
  switch(currentState) {
    case STATE_DISCONNECTED:
      display.println("Fingerprint Sensor");
      display.println("NOT CONNECTED");
      display.println("Check wiring");
      break;
    case STATE_CONNECTED:
      display.println("Fingerprint Ready");
      display.println("Stored: " + String(finger.templateCount));
      display.println("Capacity: " + String(finger.capacity));
      display.println("IP: " + WiFi.localIP().toString());
      break;
    case STATE_ENROLLING:
      display.println("Enrollment Mode");
      display.println("Place finger");
      display.println("on sensor...");
      break;
    case STATE_MATCHING:
      display.println("Matching Mode");
      display.println("Place finger");
      display.println("to verify...");
      break;
    case STATE_ENROLL_SUCCESS:
      display.println("Enrollment");
      display.println("SUCCESS!");
      display.println("Stored: " + String(finger.templateCount));
      break;
    case STATE_MATCH_SUCCESS:
      display.println("Match");
      display.println("SUCCESS!");
      display.println("Welcome!");
      break;
  }
  
  display.display();
}

// Handle Fingerprint Operations
void handleFingerprintOperations() {
  static uint8_t id = 0;  // For enrollment
  
  switch(currentState) {
    case STATE_ENROLLING:
      if (getFingerprintEnroll(id)) {
        currentState = STATE_ENROLL_SUCCESS;
        webSocket.broadcastTXT("Enrollment successful for ID: " + String(id));
        id++;  // Increment for next enrollment
      }
      updateDisplay();
      break;
      
    case STATE_MATCHING:
      if (getFingerprintID() != -1) {
        currentState = STATE_MATCH_SUCCESS;
        webSocket.broadcastTXT("Fingerprint matched!");
      }
      updateDisplay();
      break;
      
    case STATE_ENROLL_SUCCESS:
    case STATE_MATCH_SUCCESS:
      delay(3000);  // Show success message for 3 seconds
      currentState = STATE_CONNECTED;
      updateDisplay();
      break;
  }
}

// Fingerprint Enrollment Function
uint8_t getFingerprintEnroll(uint8_t id) {
  int p = -1;
  
  display.clearDisplay();
  display.println("Enrolling ID #");
  display.println(String(id));
  display.println("Place finger");
  display.display();
  
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        display.println("Image taken");
        display.display();
        break;
      case FINGERPRINT_NOFINGER:
        display.print(".");
        display.display();
        break;
      default:
        display.println("Error");
        display.display();
        return false;
    }
  }

  // Convert image to feature template
  p = finger.image2Tz(1);
  if (p != FINGERPRINT_OK) {
    display.println("Image2Tz failed");
    display.display();
    return false;
  }

  display.println("Remove finger");
  display.display();
  delay(2000);
  
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }

  display.println("Place same");
  display.println("finger again");
  display.display();
  
  p = -1;
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        display.println("Image taken");
        display.display();
        break;
      case FINGERPRINT_NOFINGER:
        display.print(".");
        display.display();
        break;
      default:
        display.println("Error");
        display.display();
        return false;
    }
  }

  // Convert second image to feature template
  p = finger.image2Tz(2);
  if (p != FINGERPRINT_OK) {
    display.println("Image2Tz failed");
    display.display();
    return false;
  }

  // Create model from two feature templates
  display.println("Creating model");
  display.display();
  
  p = finger.createModel();
  if (p != FINGERPRINT_OK) {
    display.println("CreateModel failed");
    display.display();
    return false;
  }

  // Store model in flash
  display.println("Storing model");
  display.println("ID #" + String(id));
  display.display();
  
  p = finger.storeModel(id);
  if (p != FINGERPRINT_OK) {
    display.println("StoreModel failed");
    display.display();
    return false;
  }

  return true;
}

// Fingerprint Matching Function
int getFingerprintID() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) return -1;
  
  // Found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence "); Serial.println(finger.confidence);
  return finger.fingerID;
}


Complete System Explanation
Hardware Connections
1. OLED Display (SSD1306)

VCC → 3.3V

GND → GND

SCL → GPIO 22 (ESP32 default I2C clock)

SDA → GPIO 21 (ESP32 default I2C data)

2. R307 Fingerprint Sensor

VCC → 3.3V

GND → GND

TX → GPIO 16 (ESP32 RX)

RX → GPIO 17 (ESP32 TX)