#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebSocketsServer.h>
#include <Adafruit_Fingerprint.h>

class FingerprintSystem {
private:
    // OLED Configuration
    static const uint8_t SCREEN_WIDTH = 128;
    static const uint8_t SCREEN_HEIGHT = 64;
    static const int8_t OLED_RESET = -1;
    static const uint8_t SCREEN_ADDRESS = 0x3C;
    Adafruit_SSD1306 display;

    // Fingerprint Sensor Configuration
    static const uint8_t FINGERPRINT_RX = 16;
    static const uint8_t FINGERPRINT_TX = 17;
    HardwareSerial fingerSerial;
    Adafruit_Fingerprint fingerSensor;

    // LED Pins
    static const uint8_t LED_SUCCESS = 32;
    static const uint8_t LED_PENDING = 33;

    // WiFi Configuration
    const char* ssid = "TCA@Admin";
    const char* password = "Shivam@9211";

    // WebSocket
    WebSocketsServer webSocket;

    // System States
    enum class SystemState {
        DISCONNECTED,
        CONNECTED
    };
    SystemState currentState;

    void initializeOLED() {
        if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
            Serial.println(F("OLED allocation failed"));
            for(;;);
        }
        display.clearDisplay();
        display.display();
    }

    void initializeFingerprintSensor() {
        fingerSerial.begin(57600, SERIAL_8N1, FINGERPRINT_RX, FINGERPRINT_TX);
        
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println("Initializing Sensor...");
        display.display();
        
        fingerSensor.begin(57600);
        
        if (fingerSensor.verifyPassword()) {
            currentState = SystemState::CONNECTED;
            Serial.println("Sensor found");
            Serial.print("Capacity: "); Serial.println(fingerSensor.capacity);
            digitalWrite(LED_SUCCESS, HIGH);
        } else {
            currentState = SystemState::DISCONNECTED;
            Serial.println("Sensor not found - check wiring");
            digitalWrite(LED_SUCCESS, LOW);
        }
        updateDisplay();
    }

    void connectToWiFi() {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("Connecting to WiFi");
        display.println(ssid);
        display.display();
        
        WiFi.begin(ssid, password);
        while (WiFi.status() != WL_CONNECTED) {
            delay(500);
            display.print(".");
            display.display();
        }
        
        display.clearDisplay();
        display.println("WiFi connected");
        display.print("IP: ");
        display.println(WiFi.localIP());
        display.display();
        delay(2000);
    }

    void updateDisplay() {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        
        switch(currentState) {
            case SystemState::DISCONNECTED:
                display.println("Sensor Disconnected");
                display.println("Check Wiring");
                break;
            case SystemState::CONNECTED:
                display.println("Web Enabled ");
                display.println("Fingerprint EVM");
                display.println("_______________");
                display.println("System Ready");
                display.print("Stored:"); display.println(fingerSensor.templateCount);
                display.print("IP:"); display.println(WiFi.localIP());
                display.println("Admin:Mr.Brijesh ");
                break;
        }
        display.display();
    }

    static void webSocketEvent(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
        switch(type) {
            case WStype_DISCONNECTED:
                Serial.printf("[%u] Disconnected\n", num);
                break;
            case WStype_CONNECTED: {
                IPAddress ip = FingerprintSystem::instance().webSocket.remoteIP(num);
                Serial.printf("[%u] Connected from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
                FingerprintSystem::instance().sendStateUpdate(num);
                break;
            }
            case WStype_TEXT:
                FingerprintSystem::instance().handleWebSocketCommand((char*)payload);
                break;
        }
    }

    void handleWebSocketCommand(char* command) {
        Serial.printf("Received command: %s\n", command);
        // Add command handling logic here
        updateDisplay();
    }

    void sendStateUpdate(uint8_t clientNum) {
        String stateMsg = "state:";
        switch(currentState) {
            case SystemState::DISCONNECTED: 
                stateMsg += "disconnected"; 
                break;
            case SystemState::CONNECTED: 
                stateMsg += "connected"; 
                break;
        }
        stateMsg += ",templates:" + String(fingerSensor.templateCount);
        webSocket.sendTXT(clientNum, stateMsg);
    }

    void handleFingerprintOperations() {
        // Implement fingerprint operations here
    }

public:
    static FingerprintSystem& instance() {
        static FingerprintSystem instance;
        return instance;
    }

    FingerprintSystem() : 
        display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET),
        fingerSerial(2),
        fingerSensor(&fingerSerial),
        webSocket(81),
        currentState(SystemState::DISCONNECTED) {}

    void begin() {
        Serial.begin(115200);
        pinMode(LED_SUCCESS, OUTPUT);
        pinMode(LED_PENDING, OUTPUT);
        digitalWrite(LED_SUCCESS, LOW);
        digitalWrite(LED_PENDING, LOW);

        initializeOLED();
        initializeFingerprintSensor();
        connectToWiFi();

        webSocket.onEvent(webSocketEvent);
        webSocket.begin();

        updateDisplay();
    }

    void loop() {
        webSocket.loop();
        
        static unsigned long lastCheck = 0;
        if (millis() - lastCheck > 2000) {
            lastCheck = millis();
            if (!fingerSensor.verifyPassword()) {
                currentState = SystemState::DISCONNECTED;
                updateDisplay();
                webSocket.broadcastTXT("Sensor disconnected");
                digitalWrite(LED_SUCCESS, LOW);
            } else {
                digitalWrite(LED_SUCCESS, HIGH);
            }
        }
        
        handleFingerprintOperations();
    }
};

FingerprintSystem& fingerprintSystem = FingerprintSystem::instance();

void setup() {
    fingerprintSystem.begin();
}

void loop() {
    fingerprintSystem.loop();
}