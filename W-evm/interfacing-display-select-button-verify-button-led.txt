#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Button & LED Pins
#define BTN_LED 13   
#define BTN_UP 14    
#define BTN_DOWN 26  
#define BTN_VOTE 27  
#define LED_PIN 2    

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

// OLED Display Class
class OLED_Display {
private:
    Adafruit_SSD1306 display;

public:
    OLED_Display() : display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET) {}

    void begin() {
        if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
            Serial.println(F("SSD1306 allocation failed"));
            for (;;);
        }
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.clearDisplay();
        display.display();
    }

    void showFingerprintMessage() {
        display.clearDisplay();
        display.setCursor(20, 25);
        display.println("Verify Your");
        display.setCursor(25, 40);
        display.println("Fingerprint");
        display.display();
    }

    void showVoteGivenMessage(const char *candidate) {
        display.clearDisplay();
        display.setCursor(20, 20);
        display.println("Vote Given!");
        display.setCursor(10, 40);
        display.print("For: ");
        display.println(candidate);
        display.display();
        delay(1000);
    }

    void showCandidates(const char *candidates[], int selected, int voteCounts[]) {
        display.clearDisplay();
        display.setCursor(10, 10);
        display.println("Select Candidate:");
        for (int i = 0; i < 3; i++) {
            display.setCursor(20, 30 + (i * 10));
            if (i == selected) display.print("> ");
            else display.print("  ");
            display.print(candidates[i]);
            display.print(" (");
            display.print(voteCounts[i]);
            display.println(")");
        }
        display.display();
    }
};

// Voting System Class
class VotingSystem {
private:
    const char *candidates[3] = {"Vivek", "Shivam", "Ashutosh"};
    int voteCounts[3] = {0, 0, 0};
    int selectedCandidate = 0;
    bool votingMode = false;

public:
    void startVoting() { votingMode = true; }
    void stopVoting() { votingMode = false; }
    bool isVotingActive() { return votingMode; }

    void moveUp() {
        selectedCandidate = (selectedCandidate - 1 + 3) % 3; // Proper cyclic navigation
    }

    void moveDown() {
        selectedCandidate = (selectedCandidate + 1) % 3; // Proper cyclic navigation
    }

    void castVote() {
        voteCounts[selectedCandidate]++;
        stopVoting();
    }

    int getSelectedCandidateIndex() { return selectedCandidate; }
    const char *getSelectedCandidate() { return candidates[selectedCandidate]; }
    int *getVoteCounts() { return voteCounts; }
    const char **getCandidates() { return candidates; }
};

// Fingerprint System Class
class FingerprintSystem {
public:
    bool verifyFingerprint() {
        return true; // Mock fingerprint verification
    }
};

// Global Objects
OLED_Display oled;
VotingSystem voting;
FingerprintSystem fingerprint;

void setup() {
    pinMode(BTN_LED, INPUT_PULLUP);
    pinMode(BTN_UP, INPUT_PULLUP);
    pinMode(BTN_DOWN, INPUT_PULLUP);
    pinMode(BTN_VOTE, INPUT_PULLUP);
    pinMode(LED_PIN, OUTPUT);
    
    digitalWrite(LED_PIN, LOW);
    oled.begin();
    oled.showFingerprintMessage();
}

void loop() {
    static bool lastButtonStateLED = HIGH;
    static bool lastButtonStateUP = HIGH;
    static bool lastButtonStateDOWN = HIGH;
    static bool lastButtonStateVOTE = HIGH;
    
    bool currentButtonStateLED = digitalRead(BTN_LED);
    bool currentButtonStateUP = digitalRead(BTN_UP);
    bool currentButtonStateDOWN = digitalRead(BTN_DOWN);
    bool currentButtonStateVOTE = digitalRead(BTN_VOTE);

    // Start Voting after Fingerprint Verification
    if (!voting.isVotingActive() && lastButtonStateLED == HIGH && currentButtonStateLED == LOW) {
        if (fingerprint.verifyFingerprint()) {
            voting.startVoting();
            digitalWrite(LED_PIN, HIGH);
            oled.showCandidates(voting.getCandidates(), voting.getSelectedCandidateIndex(), voting.getVoteCounts());
            delay(200);
        }
    }
    lastButtonStateLED = currentButtonStateLED;

    // Candidate Selection with Up & Down Buttons
    if (voting.isVotingActive()) {
        if (lastButtonStateUP == HIGH && currentButtonStateUP == LOW) {
            voting.moveUp();
            oled.showCandidates(voting.getCandidates(), voting.getSelectedCandidateIndex(), voting.getVoteCounts());
            delay(200);
        }
        lastButtonStateUP = currentButtonStateUP;

        if (lastButtonStateDOWN == HIGH && currentButtonStateDOWN == LOW) {
            voting.moveDown();
            oled.showCandidates(voting.getCandidates(), voting.getSelectedCandidateIndex(), voting.getVoteCounts());
            delay(200);
        }
        lastButtonStateDOWN = currentButtonStateDOWN;

        // Cast Vote with Vote Button
        if (lastButtonStateVOTE == HIGH && currentButtonStateVOTE == LOW) {
            voting.castVote();
            oled.showVoteGivenMessage(voting.getSelectedCandidate());
            digitalWrite(LED_PIN, LOW);
            oled.showFingerprintMessage();
            delay(500);
        }
        lastButtonStateVOTE = currentButtonStateVOTE;
    }
}
